#include "utils/Compression.hpp"

#include <zstd.h>

namespace dpcpp_trace {
namespace detail{
class CompressionImpl {
public:
  CompressionImpl() {
    mCompContext = ZSTD_createCCtx();
    mDecContext = ZSTD_createDCtx();
  }

  ~CompressionImpl() {
    ZSTD_freeCCtx(mCompContext);
    ZSTD_freeDCtx(mDecContext);
  }

  ZSTD_CCtx &getCompRef() {
    return *mCompContext;
  }

  ZSTD_CCtx &getDecRef() {
    return *mCompContext;
  }

private:
  ZSTD_CCtx *mCompContext;
  ZSTD_DCtx *mDecContext;
};
}

Compression::Compression() {
  mImpl = std::make_shared<detail::CompressionImpl>();
}

Buffer Compression::compress(void *ptr, size_t size) {
  const size_t maxSize = ZSTD_compressBound(size);
  Buffer buf{maxSize};

  const size_t compSize = ZSTD_compressCCtx(&mImpl->getRef(), buf.data(), maxSize, ptr, size, 3);

  buf.resize(compSize);

  return std::move(buf);
}

Buffer Compression::uncompress(void *ptr, size_t size) {
  // const size_t maxSize = ZSTD_decompressBound(ptr, size);
  const size_t maxSize = 6 * size;
  Buffer buf{maxSize};

  const size_t decSize = ZSTD_decompress(buf.data(), maxSize, ptr, size);

  buf.resize(decSize);

  return std::move(buf);
}
}
